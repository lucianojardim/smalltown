{"version":3,"sources":["features/counter/counterSlice.ts","app/store.ts","theme.ts","logo.svg","features/counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx","features/counter/Counter.module.css"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","store","configureStore","reducer","counterReducer","theme","createMuiTheme","palette","primary","main","secondary","error","background","default","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","amount","setTimeout","App","src","logo","alt","href","rel","Button","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ThemeProvider","Fragment","CssBaseline","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.089b3bee.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3f51b5',\n    },\n    secondary: {\n      main: '#f50057',\n    },\n    error: {\n      main: '#f44336',\n    },\n    background: {\n      default: '#fafafa',\n    },\n  },\n});\n\nexport default theme;\n","export default __webpack_public_path__ + \"static/media/logo.71eb13e2.svg\";","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n} from './counterSlice';\r\nimport styles from './Counter.module.css';\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header>\n      <Button variant=\"contained\" color=\"primary\">\n        Hello World\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <React.Fragment>\n      <CssBaseline />\n      <React.StrictMode>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </React.StrictMode>\n    </React.Fragment>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"value\":\"Counter_value__1d0te\",\"button\":\"Counter_button__1xpSV\",\"textbox\":\"Counter_textbox__3ODaX\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};"],"sourceRoot":""}